import grpc
from enum import IntEnum
from pydantic import BaseModel
from fast_grpc.utils import message_to_pydantic, pydantic_to_message

pb2, pb2_grpc = grpc.protos_and_services("{{ proto_define.package }}")
{% for enum in proto_define.enums.values() %}
class {{ enum.name }}(IntEnum):
    {%- for field in enum.fields %}
    {{ field.name }} = {{ field.index }}
    {%- endfor %}

{% endfor %}
{% for message in proto_define.messages.values() %}
class {{ message.name }}(BaseModel):
    {%- if message.fields %}
    {%- for field in message.fields %}
    {{ field.name }}: {{ field.type }}
    {%- endfor %}
    {% else %}
    pass
    {% endif %}
{% endfor %}
{% for service in proto_define.services %}
class {{ service.name }}Client:
    def __init__(self, target: str="127.0.0.1:50051"):
        self.target = target

    {% for method in service.methods -%}
    def {{ method.name }}(self, request: {{ method.request }}) -> {{ method.response }}:
        with grpc.insecure_channel(self.target) as channel:
            client = pb2_grpc.{{ service.name }}Stub(channel)
            response = client.{{ method.name }}(pydantic_to_message(request, pb2.{{ method.request }}))
            return message_to_pydantic(response, {{ method.response }})

    {% endfor %}
{% endfor %}
